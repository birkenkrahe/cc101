#+TITLE:Literate programming with Emacs and Org-mode
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:
#+STARTUP:overview hideblocks
#+OPTIONS: toc:1 ^:nil
:PROPERTIES:
#+PROPERTY: header-args:C :main yes 
#+PROPERTY: header-args:C :includes <stdio.h>
#+PROPERTY: header-args:C :exports both
#+PROPERTY: header-args:C :results output
#+PROPERTY: header-args:C :comments both
:END:
:REVEAL_PROPERTIES:
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_REVEAL_JS_VERSION: 4
#+REVEAL_INIT_OPTIONS: slideNumber:true
#+REVEAL_THEME: serif
#+OPTIONS: timestamp:nil toc:1 num:nil
:END:
* README

- [ ]  This file introduces literate programming using the GNU Emacs
  editor and Org-mode as IDE (Integrated Development
  Environment)[fn:1].

- [ ]  There is a much longer, more detailed version with more
  information on installation, customization and background

* What you will learn:

  #+attr_reveal: :frag (appear)
- What is literate programming
- How to tangle code and weave documentation
- Understanding Org-mode code blocks
- What will you have to know and do in this course

* Setup

  To make sure that you can run the Org-mode C code blocks, type
  ~CTRL-c~ twice (written ~C-c C-c~) with the cursor anywhere on the code
  block "[[pgm:readme]]":

  #+name: pgm:readme
  #+begin_src C :tangle ../src/readme.c :results outputs :includes <stdio.h.>
    puts("Yes, it works.");
  #+end_src

  #+RESULTS: pgm:readme
  | Yes | it works. |


  Anything else but the output ~Yes, it works~ spells trouble:
  + Check that you have a ~.emacs~ file in ~$HOME~.
  + Check that the ~.emacs~ file contains these lines:

    #+name: ex:emacs
    #+begin_example emacs-lisp
    (org-babel-do-load-languages
    'org-babel-load-languages '((C . t)))
    #+end_example

  + Check that you have GCC or another C compiler installed by
    entering in a terminal: ~gcc --version~. This is what I get:

    #+begin_example bash
    pi@raspberrypi:~$ gcc --version
    gcc (Raspbian 10.2.1-6+rpi1) 10.2.1 20210110
    Copyright (C) 2020 Free Software Foundation, Inc.
    This is free software; see the source for copying conditions.
    #+end_example

  + Check the ~*Messages*~ buffer of this Emacs session for error
    messages

* What is literate programming

- A programming /paradigm/ that produces programs both for humans and
  for machines, invented by Donald Knuth since 1984.

  #+attr_html: :width 800px
  #+caption: What is literate programming? (2022)
  [[../img/litprog22.png]]

- In my field, data science, literate programs in the form of
  interactive notebooks are the dominant development medium[fn:2].

- Tangle code or weave documentation

- This GNU Emacs Org-mode file is an example. It contains both code
  (see [[pgm:readme]]) and documentation.

- You can infer the fact that it's an Org-mode file from the file
  ending ~.org~

- The code in this file can be /tangled/ into a C source code file,
  and it can be /woven/ into documentation (in different formats).

  #+attr_html: :width 800px
  #+caption: Tangling and weaving a literate program
  [[../img/cweb.png]]

- GNU Emacs commands can usually either be entered in a long version
  (as a function), or in a short version (as a keyboard
  sequence)[fn:3].

- To tangle code blocks, type ~C-c C-v t~ or ~M-x org-babel-tangle~ where
  ~C-~ stands for ~CTRL~, and ~M~ (meta key) stands for ~ALT~.

- To weave file documentation, type ~C-c C-e~ to get to the ~*Org Export
  Dispatcher*~ where you can choose your format.

  #+attr_html: :width 500px
  #+caption: The *Org Export Dispatcher* menu
  [[../img/dispatch.png]]

* Code blocks explained

- A code block can be executed in a given language, for example
  C[fn:4]. "Execution" in the case of a compiled language like C
  includes several steps:

  1) parse the code ("read it")
  2) put the code into a C file
  3) compile and link the C file into a binary executable
  4) execute the binary file

- So instead of going back and forth between file and command line,
  you only need one command (~C-c C-c~) to do it all in one go.

-  Anything between the meta characters ~#+begin_src~ and ~#+end_src~ is
  executed by Emacs. The file must be an Org-mode file, i.e. it must
  end in ~.org~.

- You can pass arguments to Emacs that are used during the execution,
  e.g. ~:main yes~ to wrap the code in a ~int main ()~ C function, or
  ~:includes <stdio.h>~ to include the ~stdio.h~ header file[fn:5].

- If you want to tangle the code, you need to add ~:tangle filename.c~
  to the header - this leads to a C source code file ~filename.c~.

- Code blocks should be named (so that you can link to them) using
  the meta characters ~#+name:~ . E.g. ~#+name: blck~ can be linked to
  from anywhere using double square brackets: ~[[blck]]~.

- A simple example that upon execution (~C-c C-c~) will print ~hello
  there~:

  #+name: pgm:1
  #+begin_src C
    puts("hello there");
  #+end_src

- This code block will only execute if the ~#+PROPERTY~ is set
  properly

-  An example with more arguments that also asks for input from the
  file ~input~ that will print the letter in ~input~ ('A'):

  #+name: pgm:2
  #+begin_src C :main yes :includes <stdio.h> :cmdline < ../src/input
    char c;
    scanf("%c", &c);
    printf("%c", c);
  #+end_src

- This code block will only execute, if the file ~../src/input~
  exists. Let's check:

  #+name: input
  #+begin_src bash
    cat ../src/input
  #+end_src

* Further study

  1) Reading:
     
     - [[https://lucidmanager.org/productivity/getting-started-with-emacs/][Getting Started with Emacs: A Beginner's Guide]] (Prevos, 2021)

     - [[https://opensource.com/article/20/3/getting-started-emacs][Getting started with Emacs]] (Kenlon, 2020)

     - [[http://cachestocaches.com/2018/6/org-literate-programming/][Literate Programming With Org-Mode]] (Stein, 2018)

     - [[https://sachachua.com/blog/2013/05/how-to-learn-emacs-a-hand-drawn-one-pager-for-beginners/][How to learn Emacs cheat sheet]] (Chua, 2013)

  2) Viewing:

     - [[https://youtu.be/48JlgiBpw_I][The Absolute Beginner's Guide to Emacs]] (Wilson, 2021)

     - [[https://github.com/birkenkrahe/org/blob/master/emacs/emacs_beginner.org][My notes on the video on GitHub]] (Birkenkrahe, 2022)

  3) Installing:

     - [[https://www.gnu.org/software/emacs/download.html][Emacs download for Windows, MacOS or Linux]] (GNU)

     - [[https://vigou3.gitlab.io/emacs-modified-macos/][Preconfigured Emacs for R + LaTeX for MacOS]] (Vincent Goulet)

     - [[https://vigou3.gitlab.io/emacs-modified-windows/][Preconfigured Emacs for R + LaTeX for Windows]] (Vincent Goulet)

  4) Cheat sheets

     - [[https://ccrma.stanford.edu/guides/package/emacs/emacs.html][Stanford Univ (efficient)]]

     - [[https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf][GNU Emacs reference card]]

     - [[https://sachachua.com/blog/2013/05/how-to-learn-emacs-a-hand-drawn-one-pager-for-beginners/][Sacha Chua cheat sheet (playful/hand drawn)]]
       
* Let's practice

GNU Emacs practice includes two steps:

1) [ ] Completing the GNU Emacs on-board tutorial - this will enable you
   to use the editor with ease. To open it type first:

   #+name: ex:tutor
   #+begin_example
   $  emacs -nw
   #+end_example

   Emacs should open in the terminal (no graphics). Now type ~C-h t~
   or ~M-x help-with-tutorial~ and follow the instructions all the way
   to the end. This will take about 1 hour.

   #+attr_html: :width 500px
   #+caption: First lines of the Emacs tutorial
   [[../img/tutor.png]]

2) [ ] Completing a few simple practice exercises. Download [[https://raw.githubusercontent.com/birkenkrahe/cc101/piHome/2_installation/org/practice.org][practice.org]]
   using ~wget~ on the command line:

   #+name: ex:wget1
   #+begin_example
   $  wget tinyurl.com/3tjvnws8 -O practice.org -o log
   #+end_example

3) [ ] Download the GNU Emacs initialization file [[https://raw.githubusercontent.com/birkenkrahe/cc101/piHome/2_installation/.emacs][.emacs]] using ~wget~
   on the command line (*I already did this for you on the Pis*):

   #+name: ex:wget2
   #+begin_example
   $  wget tinyurl.com/447rjn2x -O ~/.emacs -o log
   #+end_example

4) Open the  practice file with Emacs from the command line (in the same
   directory where you downloaded it to - probably ~Downloads~:

   #+name: ex:emacs
   #+begin_example
   $  emacs --name practice --file practice.org &
   #+end_example

   - This command loads the file following the ~--file~ flag, and pushes
     the process (Emacs) into the background so that you can keep
     using the terminal and don't have to open a new one. A new window
     named ~practice~ opens. You can also find it in the task bar at the
     top of the screen.

5) If all goes well, you see the file in an Emacs buffer window. You
   can open headlines, code blocks and bullet points by typing TAB
   when the cursor is on the headline. Some examples:

   * headline
     that goes over
     three lines

   * named code block:

     #+name: ex:block
     #+begin_example C
     // a C statement
     int i = 1;
     // nothing to see here
     printf("%d\n", i);
   #+end_example

6) [ ] Complete the online exercises, then submit your completed
   Org-mode file *practice.org* [[https://lyon.schoology.com/assignment/5950611625][in Schoology]] .

* Summary

- Code is often developed using special software (IDE) like Emacs
- Literate programming is a technique to develop programs for both
  human and machine consumption
- GNU Emacs is a self-extensible text editor
- Org-mode is a major Emacs mode for literate programming
- Literate programming includes tangling and weaving
- Meta information controls layout via macros

* Glossary

  | TERM                 | MEANING                                 |
  |----------------------+-----------------------------------------|
  | IDE                  | Integrated Development Environment      |
  | Literate Programming | Story + code = source + doc             |
  |                      | Programming for machines AND humans     |
  | GNU Emacs            | Text editor of the GNU Operating System |
  | Org-mode             | A major Emacs mode (environment)        |
  | Tangle file          | Extract source code file (e.g. C)       |
  | Weave file           | Extract documentation (e.g. PDF)        |
  | Meta key             | M- (usually ALT on the keyboard)        |
  | Macro                | An efficient function inserted as-is    |

* Footnotes

[fn:5]The header arguments can also be defined for the entire file
with more than one code block using the ~#+PROPERTY~ meta
characters. See the top of this file for an example (for C).

[fn:4]Many other languages are supported, too.

[fn:3]Emacs is a self-extensible editor - this means that you can
completely reprogram it. Imagine you could do that with WORD to create
exactly the text editor that you need and like.

[fn:2]Examples are: [[https://jupyter.org/][Jupyter notebooks]], [[https://colab.research.google.com/][Google Colaboratory]], [[https://www.rstudio.com/blog/r-notebooks/][RStudio
Notebooks]], or [[https://www.kaggle.com/][Kaggle]].

[fn:1]I introduced literate programming as a teaching and learning
technique only in spring 2022, see [[https://docs.google.com/presentation/d/1wA7sb41EjV6GP3oBEFsOiYnoe29WILtLJR2sHSfr6Fs/edit?usp=sharing][this presentation]] given at Lyon
College on April 8, 2022 (research paper in preparation). I was
inspired to do this by Daniel German's talk at EmacsConf 2021, "[[https://emacsconf.org/2021/talks/teach/][Using
Org-mode to teach programming]]".
