#+TITLE:Literate programming with Emacs and Org-mode
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:
#+STARTUP:overview hideblocks
#+OPTIONS: toc:1 ^:nil
#+PROPERTY: header-args:C :includes <stdio.h> :main yes :exports both :contents both :results output
* README

  * This file introduces literate programming using the GNU Emacs
    editor and Org-mode as IDE (Integrated Development
    Environment)[fn:1].

  * There is a much longer, more detailed version with more
    information on installation, customization and background

  * What you will learn:

    - What is literate programming
    - How to tangle code and weave documentation
    - Understanding Org-mode code blocks
    - What will you have to know and do in this course

* Setup

  * [ ] To make sure that you can run the Org-mode C code blocks, type
    ~CTRL-c~ twice (written ~C-c C-c~) with the cursor anywhere on the
    code block "[[pgm:readme]]":

    #+name: pgm:readme
    #+begin_src C :tangle ../src/readme.c
      puts("Yes, it works.");
    #+end_src

  * Anything else but the output ~Yes, it works~ spells trouble:
    - Check that you have a ~.emacs~ file in ~$HOME~.
    - Check that the ~.emacs~ file contains these lines:

      #+name: ex:emacs
      #+begin_example emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages '((C . t)))
      #+end_example

    - Check that you have GCC or another C compiler installed by
      entering in a terminal: ~gcc --version~. This is what I get:

      #+begin_example bash
      pi@raspberrypi:~$ gcc --version
      gcc (Raspbian 10.2.1-6+rpi1) 10.2.1 20210110
      Copyright (C) 2020 Free Software Foundation, Inc.
      This is free software; see the source for copying conditions.
      #+end_example

    - Check the ~*Messages*~ buffer of this Emacs session for error
      messages

* What is literate programming

  * A programming /paradigm/ that produces programs both for humans and
    for machines, invented by Donald Knuth since 1984.

    #+attr_html: :width 700px
    #+caption: What is literate programming? (2022)
    [[../img/litprog22.png]]

  * In my field, data science, literate programs in the form of
    interactive notebooks are the dominant development medium[fn:2].

* Tangle code or weave documentation

  * This GNU Emacs Org-mode file is an example. It contains both code
    (see [[pgm:readme]]) and documentation.

  * You can infer the fact that it's an Org-mode file from the file
    ending ~.org~

  * The code in this file can be /tangled/ into a C source code file,
    and it can be /woven/ into documentation (in different formats).

  * GNU Emacs commands can usually either be entered in a long version
    (as a function), or in a short version (as a keyboard sequence)[fn:3].

  * To tangle code blocks, type ~C-c C-v t~ or ~M-x org-babel-tangle~
    where ~C-~ stands for ~CTRL~, and ~M~ (meta key) stands for ~ALT~.

  * To weave file documentation, type ~C-c C-e~ to get to the ~*Org
    Export Dispatcher*~ where you can choose your format.

* Code blocks explained

  * A code block can be executed in a given language,
    e.g. C[fn:4]. "Execution" in the case of a compiled language like
    C includes several steps:

    1) parse the code ("read it")
    2) put the code into a C file
    3) compile and link the C file into a binary executable
    4) execute the binary file

  * So instead of going back and forth between file and command line,
    you only need one command (~C-c C-c~) to do it all in one go.

  * Anything between the meta characters ~#+begin_src~ and ~#+end_src~ is
    executed by Emacs. The file must be an Org-mode file, i.e. it must
    end in ~.org~.

  * You can pass arguments to Emacs that are used during the
    execution, e.g. ~:main yes~ to wrap the code in a ~int main ()~ C
    function, or ~:includes <stdio.h>~ to include the ~stdio.h~ header
    file[fn:5].

  * If you want to tangle the code, you need to add ~:tangle filename.c~
    to the header - this leads to a C source code file ~filename.c~.

  * Code blocks should be named (so that you can link to them) using
    the meta characters ~#+name:~ . E.g. ~#+name: blck~ can be linked to
    from anywhere using double square brackets: ~[[blck]]~.

  * A simple example that upon execution (~C-c C-c~) will print ~hello there~:

    #+begin_src C 
      puts("hello there");
    #+end_src

    - This code block will only execute if the ~#+PROPERTY~ is set
      properly

  * An example with more arguments that also asks for input from the
    file ~input~ that will print the letter in ~input~ ('A'):

    #+begin_src C :main yes :includes <stdio.h> :cmdline < ../src/input
      char c;
      scanf("%c", &c);
      printf("%c", c);
    #+end_src

    - This code block will only execute, if the file ~../src/input~
      exists

* TODO Further study

  * Reading: 

  * Viewing:

  * Installing:

* Let's practice

  GNU Emacs practice includes two steps:

  1) [ ] Completing the GNU Emacs on-board tutorial - this will enable you
     to use the editor with ease. To open it type first:

     #+name: ex:tutor
     #+begin_example
     $  emacs -nw
     #+end_example

     Emacs should open in the terminal (no graphics). Now type ~C-h t~
     or ~M-x help-with-tutorial~ and follow the instructions all the way
     to the end. This will take about 1 hour.

     #+attr_html: :width 500px
     #+caption: First lines of the Emacs tutorial
     [[../img/tutor.png]]

  2) [ ] Completing a few simple practice exercises. Download [[https://raw.githubusercontent.com/birkenkrahe/cc101/piHome/2_installation/org/practice.org][practice.org]]
     using ~wget~ on the command line:

     #+name: ex:wget
     #+begin_example
     $  wget tinyurl.com/3tjvnws8 -O practice.org -o log
     #+end_example

  3) Open the file with Emacs from the command line (in the same
     directory where you downloaded it to - probably ~Downloads~:

     #+name: ex:emacs
     #+begin_example
     $  emacs --file practice.org &
     #+end_example

     - This command loads the file following the ~--file~ flag, and pushes
       the process (Emacs) into the background so that you can keep
       using the terminal and don't have to open a new one.

  4) If all goes well, you see the file in an Emacs buffer window. You
     can open headlines, code blocks and bullet points by typing TAB
     when the cursor is on the headline. Some examples:

     * headline
       that goes over
       three lines

     * code block:
       #+begin_example C
     int main (void) {
     // nothing to see here
     }
     #+end_example

  5) [ ] Complete the online exercises, then submit your completed
     Org-mode file practice.org in Schoology here.

* Summary

   * Code is often developed using special software (IDE) like Emacs
   * Literate programming is a technique to develop programs for both
     human and machine consumption
   * GNU Emacs is a self-extensible text editor
   * Org-mode is a major Emacs mode for literate programming
   * Literate programming includes tangling and weaving
   * Meta information controls layout via macros

[[id:7b22cd97-bf1a-4cde-af09-a67b6e65b599][cc-glossary]]

* Footnotes

[fn:5]The header arguments can also be defined for the entire file
with more than one code block using the ~#+PROPERTY~ meta
characters. See the top of this file for an example (for C).

[fn:4]Many other languages are supported, too. E.g. the following code
block runs the statistical programming language R:
#+begin_src R :session :results output
  str(mtcars)
#+end_src

[fn:3]Emacs is a self-extensible editor - this means that you can
completely reprogram it. Imagine you could do that with WORD to create
exactly the text editor that you need and like.

[fn:2]Examples are: [[https://jupyter.org/][Jupyter notebooks]], [[https://colab.research.google.com/][Google Colaboratory]], [[https://www.rstudio.com/blog/r-notebooks/][RStudio
Notebooks]], or [[https://www.kaggle.com/][Kaggle]].

[fn:1]I introduced literate programming as a teaching and learning
technique only in spring 2022, see [[https://docs.google.com/presentation/d/1wA7sb41EjV6GP3oBEFsOiYnoe29WILtLJR2sHSfr6Fs/edit?usp=sharing][this presentation]] given at Lyon
College on April 8, 2022 (research paper in preparation). I was
inspired to do this by Daniel German's talk at EmacsConf 2021, "[[https://emacsconf.org/2021/talks/teach/][Using
Org-mode to teach programming]]".
