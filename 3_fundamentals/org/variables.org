#+TITLE:C Fundamentals
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: See also King chapter 2 - for CSC 100 Intro to Programming in C/C++
#+STARTUP: overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:C :main yes
#+PROPERTY: header-args:C :includes <stdio.h>
#+PROPERTY: header-args:C :exports both
* README

  * This file accompanies the lecture on variables and assignments in
    C. To gain practice, you should type along in your own Org-mode
    file.

  * To make this easier, use the auto expansion (~<s~), add the
    following two lines at the top of your file, and activate each
    line with ~C-c C-c~ (you should get a confirmation in the
    minibuffer):
    #+begin_example
    #+PROPERTY: header-args:C :main yes
    #+PROPERTY: header-args:C :includes <stdio.h>
    #+end_example

  * Remember that ~C-M-\~ inside a code block indents syntactically

  * You will find more class content in the ~agenda.org~ and
    ~notes.org~ files.

* Variable types and declarations

  * C computes using placeholders, or *variables*

  * Each variable must have a *type* to specify the data it can hold

  * E.g. ~int~ (integer), ~float~ (floating point), ~char~ (character)

  * Variables must be *declared* before they can be used, see [[type
    declaration examples]]
    #+name: type declaration examples
    #+begin_src C :results silent
      int height;
      float profit;
      char name;
    #+end_src

  * Several variables of the same type can be declared together:
    #+name: type declaration examples 1
    #+begin_src C :results silent
      int height, length, width, volume;
      float profit, loss;
      char first_name, last_name;
    #+end_src

  * Variable type declarations must precede statements that use the
    variables

  * The block with *declarations* comes before the statements[fn:1]

* Variable assignment

  * A variable gets its value through *assignment*

  * In [[assignment example 1]], the variable ~height~ gets the value
    ~8~[fn:4]
    #+name: assignment example 1
    #+begin_src C
      height = 8;
    #+end_src

    #+RESULTS: assignment example 1

  * [X] If you tried to run [[assignment example 1]], you got an
    error. Can you see why?[fn:2]

  * [X] However, [[assignment example 2]] throws another error. What's
    wrong this time?[fn:3]
    #+name: assignment example 2
    #+begin_src C
      height = 8;
      int height;
    #+end_src

    #+RESULTS: assignment example 2

  * Code block [[assignment example fixed]] works.
    #+name: assignment example fixed
    #+begin_src C :results silent
      int height;
      height = 8;
    #+end_src

  * A constant assigned to a ~float~ variable contains a decimal point
    and the letter ~f~, as shown in [[float point]].
    #+name: float point
    #+begin_src C :results silent
      float profit;
      profit = 2150.48f;
    #+end_src

  * Assigning a ~float~ to an ~int~ and vice versa is possible but not
    safe.

  * Variables with values can be used to compute other values, as
    shown in [[compute value]].
    #+name: compute value
    #+begin_src C :results silent
      int height, length, width, volume;

      height = 8;
      length = 12;
      width =10;
      volume = height * length * width;
    #+end_src

  * To print these variables, we need to learn *formatting*

* Formatting printout

  * We use the built-in (via ~stdio.h~) function ~printf~ to print

  * In the code [[int print]], ~%d~ is a placeholder for an ~int~:
    #+name: int print
    #+begin_src C
      int height;  // type declaration
      height = 8;  // variable assignment

      printf("The height is: %d\n", height); // formatted printout
    #+end_src

  * In [[float print]], ~%f~ is used to print a ~float~:
    #+name: float print
    #+begin_src C
      float profit;       // type declaration
      profit = 2150.48f;  // variable assignment

      printf("The profit is: $%f\n", profit); // formatted printout
    #+end_src

  * By default, ~%f~ displays the result with six digits. To change
    it to ~p~ digits, put ~.p~ between ~%~ and ~f~. E.g. to print it
    with 2 digits, ~p=2~:
    #+name: p digits
    #+begin_src C
      float profit;       // type declaration
      profit = 2150.48f;  // variable assignment

      printf("The profit is: $%.2f\n", profit); // formatted printout
    #+end_src

  * What happens when you get the formatting wrong?  in [[format_test]],
    we print a ~float~ first correctly, then with the wrong format
    identifier, and then the other way around.
    #+name: format_test
    #+begin_src C :results raw
      float foo;  // defined float
      foo = 3.14f;   // assigned float
      printf("%.2f\n",foo);  // formatted float as float
      printf("%d\n",foo);  // formatted float as int

      int bar;  // defined int
      bar = 314;   // assigned int
      printf("%d\n",bar);  // formatted int as int
      printf("%.2f\n",bar);  // formatted int as float
    #+end_src

    #+RESULTS: format_test
    3.14
    1610612736
    314
    3.14

* Putting it all together (C program)

  * Shipping fees are based on volume instead of weight. For the
    conversion, the volume is divided by 166. If the result exceeds
    the actual weight, the shipping fee is based on the "dimensional
    weight"[fn:5].

  * We write a program to compute the dimensional ~weight~ of a box of
    given ~volume~ - we use ~/~ for division. Let's say the box is
    12'' x 10'' x 8 ''. What does [[box_error]] need to run?
    #+name: box_error
    #+begin_src C
      volume = 12 * 10 * 8
        weight = volume / 166
    #+end_src

  * Fixed the errors in [[box]]. The compiler no longer complains, but
    we don't see anything. How can we print the result?
    #+name: box
    #+begin_src C
      int weight, volume;
      volume = 12 * 10 * 8;
      weight = volume / 166;
    #+end_src

  * The code in [[box_print]] prints the result of the computation.
    #+name: box_print
    #+begin_src C
      int weight, volume;     // declare variable types
      volume = 12 * 10 * 8;   // compute value
      weight = volume / 166;  // assign and compute values
      printf("The dimensional weight is %d\n",weight); // print result
    #+end_src

    #+RESULTS: box_print
    : The dimensional weight is 5

  * This is not what we need. When dividing one integer by another, C
    "truncates" the answer - the result is rounded down, but the
    shipping company wants us to round up. This can be achieved by
    adding 165 to the volume before dividing by 166[fn:6] as shown in
    [[dweight]].
    #+name: dweight
    #+begin_src C
      int weight, volume;     // declare variable types
      volume = 12 * 10 * 8;   // compute value
      weight = (volume + 165) / 166;  // assign and compute values
      printf("The dimensional weight is %d\n",weight); // print result
    #+end_src

  * Now for the final program [[dweight_c]]. This time, we allow for
    tangling the program as ~dweight.c~.
    #+name: dweight_c
    #+begin_src C :tangle dweight.c :results raw
      #include <stdio.h>

      int main(void)
      {
        // declare variable types
        int height, length, width, volume, weight;

        // variable assignments
        height = 8;
        length = 12;
        width = 10;
        volume = height * length * width;
        weight = (volume + 165) / 166;

        // print results
        printf("Dimensions: %dx%dx%d\n", length, width, height);
        printf("Volume (cubic inches): %d\n", volume);
        printf("Dimensional weight (pounds): %d\n", weight);

        return 0;
      }
    #+end_src

* Glossary

  | TERM             | EXPLANATION                                                          |
  |------------------+----------------------------------------------------------------------|
  | Variable         | Placeholder for a value, e.g. a number                               |
  | Type             | Tells the computer to reserve memory, e.g. ~int~ for integer numbers |
  | Type declaration | Combination of type and variable name - e.g. ~int height;~           |
  | ~int~            | C type for integer numbers, e.g. 2                                   |
  | ~float~          | C type for floating point numbers, e.g. 3.14                         |
  | ~char~           | C type for characters, like "joey"                                   |
  | Formatting       | Tells the computer how to print, e.g. ~%d~ for ~int~ types           |
  | ~%d~             | Format for integers                                                  |
  | ~%f~ and ~%.pf~  | Format for floating point numbers (with ~p~ digits after the point)  |

* References
  * <<unirelo>> N.a. (2020). What is dimensional weight of cargo and
    why is it important? [blog]. [[https://www.unirelo.com/dimensional-weight/][URL: www.unirelo.com]].
* Footnotes

[fn:6] 165/166 is 0.9939759, so we've just messed with the actual
volume.

[fn:5]
#+begin_quote
"Cargo space has physical limits based on the volume of the cargo and
the weight. The reason why both volume & weight are evaluated can be
better understood if you consider the cost of shipping a large object
with less weight.

For example, a large box containing styrofoam cups weighs very less,
i.e., the dimensional (volume) weight of that box will likely be more
than its actual weight. It is for this reason that most airlines and
other transport providers evaluate both dimensional weight & actual
weight, and then use the greater of the two weights to bill you for
the transportation costs. The greater of the two weights is also
commonly referred to as ‘chargeable weight’." ([[unirelo][UniRelo, 2020]])
#+end_quote

[fn:4]The value ~8~ is called a ~constant~ because it cannot change

[fn:3]The declaration must precede the use of the variable.

[fn:2]Assignment is variable use. Variable types must be declared
before they can be used.

[fn:1]In the C99 standard, declarations don't have to come before
statements.
