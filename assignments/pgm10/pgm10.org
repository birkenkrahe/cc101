#+startup: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :results output :comments both
* Arrays (pgm 10 - Fibonacci series)
** Fibonacci Series

- A Fibonacci series is a series of numbers where each number is the
  sum of the previous two numbers in the series. (i.e. 0 1 1 2 3
  5....).

- Write a C program that puts the first ~30~ numbers of the Fibonacci
  series into an /array/ and then prints them out.

- Use the Org-mode file fibonacci.org (GitHub) as a template and
  simply work through the file step by step and submit the completed
  file.

- In this exercise, you will once again use the ~noweb~ option to insert
  pre-defined code blocks into other code blocks to build up a program
  step by step. This is a precursor to object-oriented programming,
  and it is also a literate programming technique.

- The exercise includes 3 optional bonus challenges each worth 10
  points.

** Org-mode code block and header options

1) Add an Emacs Org-mode file header line ~#+PROPERTY:~

2) Add the following options to the Org-mode file header line:
   #+begin_example
   C :main yes :includes <stdio.h> :tangle fibonacci.c :results output
   #+end_example

3) Once you created the line, run it with ~C-c C-c~ so that the
   settings are applied to the whole Org-mode file.

4) Make your own code block below this line, and print "~Hello World~"
   to make sure the setup works. Name the code block ~hello_world~.

----- put code here -----

----- solution -----
#+name: hello_world
#+begin_src C
  puts("hello world");
#+end_src

#+RESULTS: hello_world
: hello world

5) Don't forget to save with ~C-x C-s~.

** Pseudo code

1) Write the pseudo code for the Fibonacci series program.

2) Use an ~example~ block (Org template: ~<e TAB~) and name it.

3) Tip: the Fibonacci series needs to be initialized with the first
   two elements of the series, ~fibo[0]=0~ and ~fibo[1]=1~.

4) Tip: write (incomplete) code next to the pseudo code like so:
   #+begin_example
     declare array of n elements  // fibo[n]
   #+end_example

----- put code below this line -----

----- solution -----

#+name: pseudo:fibo
#+begin_example
   declare array and counter variable  // fibo[30], i
   assign first two elements of series // fibo[0]=0, fibo[1]=1
   for 30  elements starting at i = 2  // for(i=2,i<30,i++)
       compute fibonacci array // fibo[i] = fibo[i-2] + fibo[i-1]
   for 30 elements starting at i = 0   // for(i=0,i<30,i++)
       print array elements
#+end_example

** Declarations

1) Copy the code block you created above and yank it, or create a
   new C code block named ~declarations~.

2) You will need to declare an /integer array/ ~fib~ of size ~30~ and an
   integer variable ~i~ for looping purposes.

3) Make your code block below and run it with ~C-c C-c~ to make sure it
   is syntactically correct. Since there is no output, add ~:results
   silent~ to the header arguments.

----- PUT CODE BELOW THIS LINE -----

----- solution -----

#+name: declarations
#+begin_src C :results silent
  int fib[30], i;
#+end_src

** Initialization

1) Create a new code block named ~initialize~ below, and add the header
   options ~:results silent~ and ~:noweb yes~.

2) In the code block, write ~<<declarations>> in the first line. When
   you run this code block, the block [[declarations]] will be inserted.

3) You will need to assign the first two numbers of the Fibonacci
   series to the array. This gives the computer the starting point to
   start from. Remember as stated above the Fibonacci series is a
   series of numbers where every number is the sum of the previous two
   numbers.

----- PUT CODE BELOW THIS LINE -----

----- solution -----

#+name: initialize
#+begin_src C :noweb yes :results silent
  <<declarations>>
  fib[0] = 0;
  fib[1] = 1;
#+end_src

** Loop over array

1) Create a new code block named [[loop]] below, and add the header
   options ~:results silent~ and ~:noweb yes~.

2) In the code block, write ~<<initialize>>~ in the first line. When you
   run this code block, the block [[initialize]] will be inserted. Notice
   that this includes both the declarations and the initialization.

3) Now write the main loop to compute the Fibonacci numbers for the
   entire array ~fib[30]~.

----- put your code below this line -----

----- solution -----

#+name: loop
#+begin_src C :noweb yes :results silent
  <<initialize>>  // includes [[declarations]]
  for ( i = 2; i < 30; i++ )
    fib[i] = fib[i-2] + fib[i-1];
#+end_src

** Print and check results

1. The array ~fib~ should now hold the first 30 Fibonacci numbers: $0,
   1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,
   1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393,
   196418, 317811, 514229$.

2. Print your numbers. The output should look like this:

   #+begin_example
   The first N = 30 Fibonacci numbers:
   fib[ 0] = 0
   fib[ 1] = 1
   fib[ 2] = 1
   ...
   fib[10] = 55
   ...
   #+end_example

3. Import the code block [[loop]] in the final code block as shown
   below. You only have to add the printing statements.

   #+name: pgm:fibonacci
   #+begin_src C :noweb yes :results output
     <<loop>> // includes: [[declarations]] and [[initialize]]
     puts("The first N = 30 Fibonacci numbers:");
     for ( i = 0; i < 30; i++ ) {
       printf("fib[%2d] = %-10d\n", i, fib[i]);
      }
   #+end_src

   #+RESULTS: pgm:fibonacci
   #+begin_example
   The first N = 30 Fibonacci numbers:
   fib[ 0] = 0
   fib[ 1] = 1
   fib[ 2] = 1
   fib[ 3] = 2
   fib[ 4] = 3
   fib[ 5] = 5
   fib[ 6] = 8
   fib[ 7] = 13
   fib[ 8] = 21
   fib[ 9] = 34
   fib[10] = 55
   fib[11] = 89
   fib[12] = 144
   fib[13] = 233
   fib[14] = 377
   fib[15] = 610
   fib[16] = 987
   fib[17] = 1597
   fib[18] = 2584
   fib[19] = 4181
   fib[20] = 6765
   fib[21] = 10946
   fib[22] = 17711
   fib[23] = 28657
   fib[24] = 46368
   fib[25] = 75025
   fib[26] = 121393
   fib[27] = 196418
   fib[28] = 317811
   fib[29] = 514229
   #+end_example

** Bonus challenge 1 - check result

1) Compare your result them with the correct Fibonacci sequence, which
   is stored [[https://raw.githubusercontent.com/birkenkrahe/cc101/piHome/7_arrays/src/fibonacci][in GitHub as fibonacci]] - download: [[https://tinyurl.com/4djnkr6h][tinyurl.com/4djnkr6h]].

2) You have to read the file into your computer using ~scanf~ and then
   compare two arrays element by element.

3) Tip: use an ~IF...ELSE~ or ~SWITCH...CASE~~ selection statement to
   perform the check.

----- solution -----

*** Create input file:

#name: fibonacciInput
#+begin_src bash :results output
  echo "0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610,
  987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025,
  121393, 196418, 317811, 514229" > ./src/fibonacci
  cat ./src/fibonacci
#+end_src

#+RESULTS:
: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610,
: 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025,
: 121393, 196418, 317811, 514229

*** Read input

#+name: readInput
#+begin_src C :cmdline < ./src/fibonacci
  int _fib[30];
  for ( int i = 0; i < 30; i++ ) {
    scanf("%d,", &_fib[i]);
    printf("_fib[%2d] = %-10d\n", i, _fib[i]);
   }
#+end_src

#+RESULTS: readInput
#+begin_example
_fib[ 0] = 0
_fib[ 1] = 1
_fib[ 2] = 1
_fib[ 3] = 2
_fib[ 4] = 3
_fib[ 5] = 5
_fib[ 6] = 8
_fib[ 7] = 13
_fib[ 8] = 21
_fib[ 9] = 34
_fib[10] = 55
_fib[11] = 89
_fib[12] = 144
_fib[13] = 233
_fib[14] = 377
_fib[15] = 610
_fib[16] = 987
_fib[17] = 1597
_fib[18] = 2584
_fib[19] = 4181
_fib[20] = 6765
_fib[21] = 10946
_fib[22] = 17711
_fib[23] = 28657
_fib[24] = 46368
_fib[25] = 75025
_fib[26] = 121393
_fib[27] = 196418
_fib[28] = 317811
_fib[29] = 514229
#+end_example

*** Check computation

To compare computed and given results, include [[loop]] - output is
~fib[30]~, then add elementwise comparison in the read input loop.

#+name: check
#+begin_src C :noweb yes :results output
  <<loop>> // get computed Fibonacci numbers fib[30]

  int _fib[30];
  for ( int j = 0; j < 30; j++ ) {
    scanf("%d,", &_fib[j]);
    printf("_fib[%2d] = %-10d == -10%d\n", j, _fib[j], fib[j]);
    switch ( _fib[i] == fib[i] ) {
    case 0:
      puts("FALSE");
      break;
    case 1:
      puts("TRUE");
      break;
    }
   }
#+end_src

#+RESULTS: check
#+begin_example
_fib[ 0] = 0          == -100
TRUE
_fib[ 1] = 54         == -101
FALSE
_fib[ 2] = 0          == -101
FALSE
_fib[ 3] = 0          == -102
FALSE
_fib[ 4] = 32         == -103
FALSE
_fib[ 5] = 1          == -105
FALSE
_fib[ 6] = 0          == -108
FALSE
_fib[ 7] = 1          == -1013
FALSE
_fib[ 8] = 0          == -1021
FALSE
_fib[ 9] = 0          == -1034
FALSE
_fib[10] = 0          == -1055
FALSE
_fib[11] = 0          == -1089
FALSE
_fib[12] = 0          == -10144
FALSE
_fib[13] = 0          == -10233
FALSE
_fib[14] = 0          == -10377
FALSE
_fib[15] = 0          == -10610
FALSE
_fib[16] = 0          == -10987
FALSE
_fib[17] = 0          == -101597
FALSE
_fib[18] = 0          == -102584
FALSE
_fib[19] = 0          == -104181
FALSE
_fib[20] = 0          == -106765
FALSE
_fib[21] = 0          == -1010946
FALSE
_fib[22] = 0          == -1017711
FALSE
_fib[23] = 0          == -1028657
FALSE
_fib[24] = 0          == -1046368
FALSE
_fib[25] = 0          == -1075025
FALSE
_fib[26] = 0          == -10121393
FALSE
_fib[27] = 0          == -10196418
FALSE
_fib[28] = 0          == -10317811
FALSE
_fib[29] = 0          == -10514229
FALSE
#+end_example

