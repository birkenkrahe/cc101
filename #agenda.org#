#+TITLE:CC Agenda
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE: CSC 100 - Summer I, 2022
#+OPTIONS: toc:1
#+STARTUP: overview hideblocks
#+PROPERTY: header-args:C :main yes :includes <stdio.h>
* README

  Agenda overview - what I had planned and what we achieved in each
  session of the course.

  If we don't manage to finish a topic in one session, it'll be
  finished in the subsequent session(s) without change of the
  originally date.
  
  See the [[file:syllabus.org][course syllabus]] for a detailed schedule.
  
* Week 1 - Hello, world
** 24-May (Tue) - Hello, C

- [X] Entry quiz (Google Forms)
- [X] Why C Programming Is Awesome (YouTube)
- [X] Setting up the infrastructure
- [X] Information about the course
- [X] Hello, C - extended example

*** Why C Programming Is Awesome (2016)

Which key points do you remember [[https://www.youtube.com/watch?v=smGalmxPVYc][from this video]]?

#+begin_quote Key points
1) Almost all popular languages are built on top of C[fn:1]
2) 500,000 lines of C code powered the Mars Curiosity Rover[fn:2]
3) Language of choice for /kernel/ development[fn:3]
4) Helps to understand how a computer actually works[fn:4]
5) Easy to land a job with C programming knowledge
6) Code is portable, efficient, reliable, small
#+end_quote

*** Course information

- All materials are hosted on [[https://github.com/birkenkrahe/cc101][GitHub]]
- For formal requirements, grades etc. see [[https://github.com/birkenkrahe/cc101/blob/piHome/syllabus.org][Syllabus]]
- Classes include: lecture / practice / programming
- Weekly quizzes and final exam (in Schoology)
- Final exam is a selection from the weekly quizzes
- Programming assignments to be submitted in Schoology

*** Setting up the hardware infrastructure

#+attr_html: :width 500px
#+caption: Raspberry Pi 400 (Source: raspberrypi.com)
[[./img/pi400.png]]

- The Pi 400 contains a credit-card sized System-on-a-chip computer

- For processor information, run ~cat /proc/cpuinfo~ in a terminal

  #+name: cpuinfo
  #+begin_src bash :results output
    cat /proc/cpuinfo
  #+end_src

  #+RESULTS: cpuinfo
  #+begin_example
  processor     : 0
  model name    : ARMv7 Processor rev 3 (v7l)
  BogoMIPS      : 108.00
  Features      : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm crc32
  CPU implementer       : 0x41
  CPU architecture: 7
  CPU variant   : 0x0
  CPU part      : 0xd08
  CPU revision  : 3

  processor     : 1
  model name    : ARMv7 Processor rev 3 (v7l)
  BogoMIPS      : 108.00
  Features      : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm crc32
  CPU implementer       : 0x41
  CPU architecture: 7
  CPU variant   : 0x0
  CPU part      : 0xd08
  CPU revision  : 3

  processor     : 2
  model name    : ARMv7 Processor rev 3 (v7l)
  BogoMIPS      : 108.00
  Features      : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm crc32
  CPU implementer       : 0x41
  CPU architecture: 7
  CPU variant   : 0x0
  CPU part      : 0xd08
  CPU revision  : 3

  processor     : 3
  model name    : ARMv7 Processor rev 3 (v7l)
  BogoMIPS      : 108.00
  Features      : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm crc32
  CPU implementer       : 0x41
  CPU architecture: 7
  CPU variant   : 0x0
  CPU part      : 0xd08
  CPU revision  : 3

  Hardware      : BCM2711
  Revision      : c03114
  Serial                : 10000000186afd4d
  Model         : Raspberry Pi 4 Model B Rev 1.4
  #+end_example

- For OS information, run ~cat /etc/os-release~ in a terminal

  #+name: osinfo
  #+begin_src bash :results output
    cat /etc/os-release
  #+end_src

  #+RESULTS: osinfo
  #+begin_example
  PRETTY_NAME="Raspbian GNU/Linux 11 (bullseye)"
  NAME="Raspbian GNU/Linux"
  VERSION_ID="11"
  VERSION="11 (bullseye)"
  VERSION_CODENAME=bullseye
  ID=raspbian
  ID_LIKE=debian
  HOME_URL="http://www.raspbian.org/"
  SUPPORT_URL="http://www.raspbian.org/RaspbianForums"
  BUG_REPORT_URL="http://www.raspbian.org/RaspbianBugs"
  #+end_example

- At the start of every session, you must:
  1) unpack the Pi 400
  2) connect the HDMI cable to your monitor
  3) connect the mouse to on of the Pi 400 USB ports
  4) pull the LAN cable from the desktop PC
  5) connect the LAN cable to the Pi 400
  6) plug the charger and connect it to the Pi 400
  7) enter ~startx~ at the terminal prompt
  8) open a browser to [[https://tinyurl.com/3ptbb7zz][tinyurl.com/3ptbb7zz]]

- At the end of every session, you must:
  1) enter ~sudo shutdown now~ at the terminal prompt
  2) unplug the power from the Pi 400
  3) unplug the LAN cable and replug it into the desktop PC
  4) unplug the USB-mouse and the HDMI cable
  5) stow mouse, cable and Pi 400 in the box

** 25-May (Wed) - Hello, Linux

- [X] Short recap   
- [X] C Toolchain practice

*** Short recap

    - What (if anything) do you remember from the last session?
    - What was important to you?
    - What did you not understand?
    - What would you like to hear more about?

    1) David/Boogie: The Linux guy Linux Torvalds developed

    2) Michael: the "kernel" (pronounced "colonel") is the nucleus or
    heart of the operating system (OS).

    3) Rhett: computers depend on "daemons" (e.g. systemd) that wait in
    the background until called upon; you cannot talk to them directly

    4) Keidrick: C code performs very well (it's fast)

    5) Alexandrea: (human-readable) C source code has to be compiled
       into machine code to be executable (binary)

*** GitHub

     The GitHub hello world exercise: [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#completing-the-github-hello-world-exercise][see FAQ]] - this will teach you the
     basics of the GitHub process, important for software development.

     #+attr_html: :width 600px
     #+caption: branch creation and merging (version control)
     [[./img/github.png]]
  
*** Computer architecture

    [[https://nostarch.com/foundationsofcomp][Book recommendation - The Secret Life of Programs (Steinhart, 2019)]]

    #+attr_html: :width 300px
    [[./img/steinhart.png]]
      
** 26-May (Thu) - Hello, Emacs

- [ ] Literate Programming with Emacs [
- [ ] Emacs tutorial - online practice (~C-h t~)
- [ ] Download/complete Org-mode practice file practice.org
- [ ] *Submit file practice.org to Schoology*

** 27-May (Fri) - Introduction to C

- [ ] *Complete quiz 1 in Schoology*
- [ ] What is C and why is it important?
- [ ] How computers work
- [ ] How programs are processed
- [ ] C vs. C++

* Week 2 - C Fundamentals / Flow control
** C Fundamentals  
  
- [ ] Commenting
- [ ] Declaring and initializing variables
- [ ] Input and output
- [ ] Naming identifiers
- [ ] Program layout
- [ ] Org-mode practice file
- [ ] *Program assignment 1*
- [ ] *Submit files to Schoology*

* Week 3 - Iteration

* Week 4 - Management

* Week 5 - Applications

* Footnotes

[fn:1]Popular languages include: C++ (industry), C# (games), Java
(enterprise), Python (machine learning), PHP (web dev),
JavaScript (web dev), etc.

[fn:2]Another language that is popular in space is Lisp - see this
2022 podcast on robots and Mars missions, "LISP in space" -
incidentally, Lisp is what powers our IDE, GNU Emacs.

[fn:3]The /kernel/ is the core of an operating system, the software that
brings your computer to life. Kernel tasks include: booting (starting
up), managing processes, performance, and guarding the computer.

[fn:4]Mentioned are: memory allocation and management. C achieves this
e.g. by its use of /pointers/ which we will encounter in this course,
though more technical memory management techniques are out of our
reach.
