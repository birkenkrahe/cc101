#+TITLE:Practicing multi-dimensional arrays
#+AUTHOR: yourName [pledged]
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :results output :comments both
* README

- Practice workbook for multidimensional-dimensional arrays in C

* TODO Identify yourself

- replace the placeholder ~[yourName]~ in the header of this file by
  your name and save the file (~C-x C-s~).

* TODO Print a 2-dimensional array

  - Declare a 4 x 3 matrix and print it in 2 dimensions. Complete the
    sample code below to get the output shown.

  - Initialize the matrix ~m[][]~ with the elements 1 through 12.

  - Define two nested ~for~ loops looping over rows and columns

  - Output:
    #+begin_example
    #+RESULTS:
    :  1  2  3
    :  4  5  6
    :  7  8  9
    : 10 11 12
    #+end_example

  - Code: 

    #+name: matrix    
    #+begin_src C
      ... // declare and initialize matrix

      for (...) {  // loop over rows
        for(...) {  // loop over columns
          ... // print matrix elements
        }
        printf("\n");
       }
    #+end_src

* TODO Use ~sizeof~ in a ~for~ loop

- The code block below defines an array ~a~ of length ~5~. Complete the
  ~for~ loop using the ~sizeof~ operator to get the output shown. The loop
  re-initializes the array ~a~.

- Run the code, then change the length of the array and re-run the
  code.

- Code:

  #+name: sizeof
  #+begin_src C
    int a[5] = {0}; // initialize array 

    for (int i = 0; i < sizeof(a)/sizeof(a[0]); i++) {
      a[i] = 1; // re-initialize array
      printf("a[%d] = %d\n", i, a[i]);
     }
  #+end_src

 

